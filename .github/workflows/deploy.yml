name: Deploy Finance Chat Bot

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev] # Add 'production' when ready

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Verify Google libraries are installed in venv
          python -c "import google.auth; import googleapiclient.discovery; print('‚úÖ Google libraries installed in venv')"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update Zappa settings with secrets
        run: |
          source venv/bin/activate
          python -c "
          import json
          import os

          with open('zappa_settings.json', 'r') as f:
              config = json.load(f)

          aws_environment_variables = {
              'TELEGRAM_BOT_TOKEN': '${{ secrets.TELEGRAM_BOT_TOKEN }}',
              'GEMINI_API_KEY': '${{ secrets.GEMINI_API_KEY }}',
              'GOOGLE_SHEETS_ID': '${{ secrets.GOOGLE_SHEETS_ID }}',
              'GOOGLE_CREDENTIALS_JSON': '${{ secrets.GOOGLE_CREDENTIALS_JSON }}',
              'ENVIRONMENT': '${{ matrix.environment }}'
          }

          config['${{ matrix.environment }}']['environment_variables'].update(aws_environment_variables)

          with open('zappa_settings.json', 'w') as f:
              json.dump(config, f, indent=2)
          "

      - name: Validate secrets
        run: |
          source venv/bin/activate
          python -c "
          import json

          # Check credentials JSON
          try:
              creds = json.loads('${{ secrets.GOOGLE_CREDENTIALS_JSON }}')
              print('‚úÖ Valid Google credentials JSON')
              print(f'Service account: {creds.get(\"client_email\", \"Unknown\")}')
          except Exception as e:
              print(f'‚ùå Invalid Google credentials JSON: {e}')
              exit(1)

          # Check Sheet ID
          sheet_id = '${{ secrets.GOOGLE_SHEETS_ID }}'
          if len(sheet_id) > 20:
              print(f'‚úÖ Sheet ID looks valid: {sheet_id[:10]}...')
          else:
              print('‚ùå Sheet ID seems too short or invalid')
              exit(1)
          "

      - name: Setup Google Sheets
        continue-on-error: true
        run: |
          source venv/bin/activate
          python -c "
          import os
          import sys

          os.environ['GOOGLE_SHEETS_ID'] = '${{ secrets.GOOGLE_SHEETS_ID }}'
          os.environ['GOOGLE_CREDENTIALS_JSON'] = '${{ secrets.GOOGLE_CREDENTIALS_JSON }}'

          try:
              print('Importing SheetsManager...')
              from sheets_integration import SheetsManager
              print('‚úÖ SheetsManager imported successfully')
              
              print('Initializing SheetsManager...')
              sheets_manager = SheetsManager(
                  credentials_json=os.environ.get('GOOGLE_CREDENTIALS_JSON'),
                  spreadsheet_id=os.environ.get('GOOGLE_SHEETS_ID')
              )
              print('‚úÖ SheetsManager initialized')
              
              print('Setting up sheets...')
              success = sheets_manager.setup_sheets()
              print('‚úÖ Google Sheets setup completed' if success else '‚ö†Ô∏è Setup completed with warnings')
              
          except ImportError as e:
              print(f'‚ùå Import error: {e}')
              print('Checking installed packages...')
              import pkg_resources
              installed = [str(d) for d in pkg_resources.working_set]
              google_pkgs = [p for p in installed if 'google' in p.lower()]
              print(f'Google packages: {google_pkgs}')
              
          except Exception as e:
              print(f'‚ö†Ô∏è Google Sheets setup error: {e}')
              print('This is not critical - sheets can be set up manually later')
          "

      - name: Deploy with Zappa
        run: |
          source venv/bin/activate
          if zappa status ${{ matrix.environment }} 2>/dev/null; then
            echo "Updating existing deployment..."
            zappa update ${{ matrix.environment }}
          else
            echo "First time deployment..."
            zappa deploy ${{ matrix.environment }}
          fi

      - name: Get deployment URL
        id: get-url
        run: |
          source venv/bin/activate
          URL=$(zappa status ${{ matrix.environment }} | grep -o 'https://[^[:space:]]*' | head -1)
          echo "LAMBDA_URL=$URL" >> $GITHUB_OUTPUT
          echo "Deployment URL: $URL"

      - name: Set Telegram Webhook
        if: steps.get-url.outputs.LAMBDA_URL != ''
        run: |
          source venv/bin/activate
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
               -H "Content-Type: application/json" \
               -d "{\"url\": \"${{ steps.get-url.outputs.LAMBDA_URL }}\"}" \
               -s | python -c "
          import json, sys
          response = json.load(sys.stdin)
          if response.get('ok'):
              print('‚úÖ Telegram webhook set successfully')
          else:
              print(f'‚ùå Failed to set webhook: {response}')
              sys.exit(1)
          "

      - name: Test basic bot functionality
        if: steps.get-url.outputs.LAMBDA_URL != ''
        continue-on-error: true
        run: |
          source venv/bin/activate
          echo "üß™ Testing bot functionality..."

          # Test if bot responds to basic command
          python -c "
          import requests
          import json

          bot_token = '${{ secrets.TELEGRAM_BOT_TOKEN }}'

          # Get bot info to verify it's working
          response = requests.get(f'https://api.telegram.org/bot{bot_token}/getMe')
          if response.json().get('ok'):
              bot_info = response.json()['result']
              print(f'‚úÖ Bot @{bot_info[\"username\"]} is active')
          else:
              print('‚ö†Ô∏è Could not verify bot status')
          "

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üîó Lambda URL: ${{ steps.get-url.outputs.LAMBDA_URL }}"
          echo ""
          echo "‚úÖ Your bot is now live! Next steps:"
          echo "1. Find your bot on Telegram and start a chat"
          echo "2. Send /start to see the welcome message"
          echo "3. Test with: 'Coffee $5.50' or send a receipt photo"
          echo "4. Use /summary to check monthly totals"
          echo "5. Use /setup if Google Sheets setup failed"
          echo ""
          echo "üìä Check your Google Sheets for logged expenses!"
