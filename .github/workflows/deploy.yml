name: Deploy Finance Chat Bot

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev] # Add 'production' when ready

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment and install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Verify Google libraries are installed in venv
          python -c "import google.auth; import googleapiclient.discovery; print('‚úÖ Google libraries installed in venv')"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Create credentials file and update Zappa settings
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
        run: |
          source venv/bin/activate

          # Update Zappa settings with error handling
          python -c "
          import json
          import os

          with open('zappa_settings.json', 'r') as f:
              config = json.load(f)

          # Only add env vars that exist
          aws_environment_variables = {
              'ENVIRONMENT': '${{ matrix.environment }}'
          }

          # Add optional env vars
          if os.environ.get('TELEGRAM_BOT_TOKEN'):
              aws_environment_variables['TELEGRAM_BOT_TOKEN'] = os.environ['TELEGRAM_BOT_TOKEN']
              
          if os.environ.get('GEMINI_API_KEY'):
              aws_environment_variables['GEMINI_API_KEY'] = os.environ['GEMINI_API_KEY']
              
          if os.environ.get('GOOGLE_SHEETS_ID'):
              aws_environment_variables['GOOGLE_SHEETS_ID'] = os.environ['GOOGLE_SHEETS_ID']
              
          if os.environ.get('GOOGLE_CREDENTIALS_JSON'):
              aws_environment_variables['GOOGLE_CREDENTIALS_JSON'] = os.environ['GOOGLE_CREDENTIALS_JSON']

          config['${{ matrix.environment }}']['environment_variables'].update(aws_environment_variables)

          with open('zappa_settings.json', 'w') as f:
              json.dump(config, f, indent=2)

          print('‚úÖ Zappa settings updated')
          "

      - name: Setup Google Sheets
        continue-on-error: true
        if: false # Skip this step to avoid deployment failures
        env:
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
        run: |
          echo "Skipping Google Sheets setup during deployment"
          echo "Sheets will be set up on first bot usage"

      - name: Deploy with Zappa (with retry)
        run: |
          source venv/bin/activate

          # Add deployment retry logic
          for i in {1..3}; do
            echo "Deployment attempt $i..."
            
            if zappa status ${{ matrix.environment }} 2>/dev/null; then
              echo "Updating existing deployment..."
              if zappa update ${{ matrix.environment }}; then
                echo "‚úÖ Update successful"
                break
              else
                echo "‚ùå Update failed, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "All update attempts failed"
                  exit 1
                fi
                sleep 10
              fi
            else
              echo "First time deployment..."
              if zappa deploy ${{ matrix.environment }}; then
                echo "‚úÖ Deploy successful"
                break
              else
                echo "‚ùå Deploy failed, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "All deploy attempts failed"
                  exit 1
                fi
                sleep 10
              fi
            fi
          done

      - name: Get deployment URL
        id: get-url
        run: |
          source venv/bin/activate
          URL=$(zappa status ${{ matrix.environment }} | grep -o 'https://[^[:space:]]*' | head -1)
          echo "LAMBDA_URL=$URL" >> $GITHUB_OUTPUT
          echo "Deployment URL: $URL"

      - name: Set Telegram Webhook
        if: steps.get-url.outputs.LAMBDA_URL != ''
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          source venv/bin/activate
          curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/setWebhook" \
               -H "Content-Type: application/json" \
               -d "{\"url\": \"${{ steps.get-url.outputs.LAMBDA_URL }}\"}" \
               -s | python -c "
          import json, sys
          response = json.load(sys.stdin)
          if response.get('ok'):
              print('‚úÖ Telegram webhook set successfully')
          else:
              print(f'‚ùå Failed to set webhook: {response}')
              sys.exit(1)
          "

      - name: Test basic bot functionality
        if: steps.get-url.outputs.LAMBDA_URL != ''
        continue-on-error: true
        run: |
          source venv/bin/activate
          echo "üß™ Testing bot functionality..."

          # Test if bot responds to basic command
          python -c "
          import requests
          import json

          bot_token = '${{ secrets.TELEGRAM_BOT_TOKEN }}'

          # Get bot info to verify it's working
          response = requests.get(f'https://api.telegram.org/bot{bot_token}/getMe')
          if response.json().get('ok'):
              bot_info = response.json()['result']
              print(f'‚úÖ Bot @{bot_info[\"username\"]} is active')
          else:
              print('‚ö†Ô∏è Could not verify bot status')
          "

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üîó Lambda URL: ${{ steps.get-url.outputs.LAMBDA_URL }}"
          echo ""
          echo "‚úÖ Your bot is now live! Next steps:"
          echo "1. Find your bot on Telegram and start a chat"
          echo "2. Send /start to see the welcome message"
          echo "3. Test with: 'Coffee $5.50' or send a receipt photo"
          echo "4. Use /summary to check monthly totals"
          echo "5. Use /setup if Google Sheets setup failed"
          echo ""
          echo "üìä Check your Google Sheets for logged expenses!"
