name: Deploy Finance Chat Bot

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev] # Add 'production' when ready

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install zappa
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Update Zappa settings with secrets
        run: |
          # Update zappa_settings.json with GitHub secrets
          python -c "
          import json
          import os

          with open('zappa_settings.json', 'r') as f:
              config = json.load(f)

          # Update environment variables from secrets
          aws_environment_variables = {
              'TELEGRAM_BOT_TOKEN': '${{ secrets.TELEGRAM_BOT_TOKEN }}',
              'GEMINI_API_KEY': '${{ secrets.GEMINI_API_KEY }}',
              'GOOGLE_SHEETS_ID': '${{ secrets.GOOGLE_SHEETS_ID }}',
              'GOOGLE_CREDENTIALS_JSON': '${{ secrets.GOOGLE_CREDENTIALS_JSON }}',
              'ENVIRONMENT': '${{ matrix.environment }}'
          }

          config['${{ matrix.environment }}']['environment_variables'].update(aws_environment_variables)

          with open('zappa_settings.json', 'w') as f:
              json.dump(config, f, indent=2)
          "

      - name: Setup Google Sheets (optional)
        continue-on-error: true
        run: |
          python -c "
          import os
          os.environ['TELEGRAM_BOT_TOKEN'] = '${{ secrets.TELEGRAM_BOT_TOKEN }}'
          os.environ['GEMINI_API_KEY'] = '${{ secrets.GEMINI_API_KEY }}'
          os.environ['GOOGLE_SHEETS_ID'] = '${{ secrets.GOOGLE_SHEETS_ID }}'
          os.environ['GOOGLE_CREDENTIALS_JSON'] = '${{ secrets.GOOGLE_CREDENTIALS_JSON }}'

          try:
              from sheets_integration import SheetsManager
              sheets_manager = SheetsManager(
                  credentials_json=os.environ.get('GOOGLE_CREDENTIALS_JSON'),
                  spreadsheet_id=os.environ.get('GOOGLE_SHEETS_ID')
              )
              success = sheets_manager.setup_sheets()
              print(' Google Sheets setup completed' if success else ' Google Sheets setup failed')
          except Exception as e:
              print(f'Google Sheets setup error: {e}')
          "

      - name: Deploy with Zappa
        run: |
          # Check if this is first deployment
          if zappa status ${{ matrix.environment }} 2>/dev/null; then
            echo "Updating existing deployment..."
            zappa update ${{ matrix.environment }}
          else
            echo "First time deployment..."
            zappa deploy ${{ matrix.environment }}
          fi

      - name: Get deployment URL
        id: get-url
        run: |
          # Extract URL from zappa status
          URL=$(zappa status ${{ matrix.environment }} | grep -o 'https://[^[:space:]]*' | head -1)
          echo "LAMBDA_URL=$URL" >> $GITHUB_OUTPUT
          echo "Lambda URL: $URL"

      - name: Set Telegram Webhook
        if: steps.get-url.outputs.LAMBDA_URL != ''
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
               -H "Content-Type: application/json" \
               -d "{\"url\": \"${{ steps.get-url.outputs.LAMBDA_URL }}\"}" \
               -s | python -c "
          import json, sys
          response = json.load(sys.stdin)
          if response.get('ok'):
              print(' Telegram webhook set successfully')
          else:
              print(f'Failed to set webhook: {response}')
              sys.exit(1)
          "

      - name: Deployment Summary
        run: |
          echo "ðŸŽ‰ Deployment completed successfully!"
          echo "Environment: ${{ matrix.environment }}"
          echo "Lambda URL: ${{ steps.get-url.outputs.LAMBDA_URL }}"
          echo ""
          echo "Next steps:"
          echo "1. Test your bot by sending a message"
          echo "2. Send a receipt photo or text expense"
          echo "3. Check your Google Sheets for logged expenses"
